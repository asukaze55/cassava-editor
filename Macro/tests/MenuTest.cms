import { Assert } from "lib/Assert.cms";

class MenuTest {
  name() {
    return "MenuTest";
  }

  clear() {
    Right = 1;
    Bottom = 1;
    Col = 1;
    Row = 1;
    [1,1] = "";
  }

  getValues(l, t, r, b) {
    result = "";
    for (y = t; y <= b; y++) {
      for (x = l; x <= r; x++) {
        result += [x,y];
      }
    }
    return result;
  }

  test(assert) {
    this.clear();

    [1,1] = "A";
    [2,1] = "B";
    [1,2] = "C";
    [2,2] = "D";
    assert.that(this.getValues(1, 1, 2, 2)).isEqualTo("ABCD");

    SelLeft = 1;
    SelTop = 1;
    SelRight = 2;
    SelBottom = 2;
    Copy();
    assert.that(this.getValues(1, 1, 2, 2)).isEqualTo("ABCD");
    SelLeft = 3;
    SelTop = 1;
    SelRight = 4;
    SelBottom = 2;
    Paste();
    assert.that(this.getValues(1, 1, 4, 2)).isEqualTo("ABABCDCD");

    SelLeft = 2;
    SelTop = 1;
    SelRight = 3;
    SelBottom = 2;
    Cut();
    assert.that(this.getValues(2, 1, 3, 2)).isEqualTo("");
    SelLeft = 1;
    SelTop = 3;
    SelRight = 2;
    SelBottom = 4;
    Paste();
    assert.that(this.getValues(1, 3, 2, 4)).isEqualTo("BADC");

    [1,1] = "1";
    [2,1] = "2";
    [3,1] = "3";
    [1,2] = "4";
    [2,2] = "5";
    [3,2] = "6";
    [1,3] = "7";
    [2,3] = "8";
    [3,3] = "9";
    Row = 1;
    SelectRow();
    Copy();
    Row = 2;
    SelectRow();
    Paste();
    assert.that(this.getValues(1, 1, 3, 1)).isEqualTo("123");
    assert.that(this.getValues(1, 2, 3, 2)).isEqualTo("123");
    assert.that(this.getValues(1, 3, 3, 3)).isEqualTo("789");

    Col = 1;
    SelectCol();
    Copy();
    Col = 2;
    SelectCol();
    Paste();
    assert.that(this.getValues(1, 1, 1, 3)).isEqualTo("117");
    assert.that(this.getValues(2, 1, 2, 3)).isEqualTo("117");
    assert.that(this.getValues(3, 1, 3, 3)).isEqualTo("339");

    SelLeft = 1;
    SelTop = 1;
    SelRight = 2;
    SelBottom = 3;
    CopySum();
    moveto(1, 4);
    Paste();
    assert.that([1,4]).isEqualTo(18);

    SelLeft = 1;
    SelTop = 1;
    SelRight = 2;
    SelBottom = 3;
    CopyAvr();
    moveto(2, 4);
    Paste();
    assert.that([2,4]).isEqualTo(3);

    moveto(1, 1);
    [1,1] = "ABC123!?アイウ";
    TransChar1();
    assert.that([1,1]).isEqualTo("ＡＢＣ１２３！？アイウ");
    TransChar0();
    assert.that([1,1]).isEqualTo("ABC123!?アイウ");
    TransChar3();
    assert.that([1,1]).isEqualTo("abc123!?アイウ");
    TransChar2();
    assert.that([1,1]).isEqualTo("ABC123!?アイウ");
    TransChar4();
    assert.that([1,1]).isEqualTo("ABC123!?ｱｲｳ");
    TransChar5();
    assert.that([1,1]).isEqualTo("ABC123!?アイウ");

    [1,1] = "data001";
    SelLeft = 1;
    SelTop = 1;
    SelRight = 1;
    SelBottom = 3;
    SequenceS();
    assert.that([1,2]).isEqualTo("data002");
    assert.that([1,3]).isEqualTo("data003");
    SequenceC();
    assert.that([1,2]).isEqualTo("data001");
    assert.that([1,3]).isEqualTo("data001");

    this.clear();
    [1,1] = "A";
    InsRow();
    assert.that(Bottom).isEqualTo(2);
    assert.that([1,1]).isEqualTo("");
    assert.that([1,2]).isEqualTo("A");
    Col = 1;
    InsCol();
    assert.that(Right).isEqualTo(2);
    assert.that([1,2]).isEqualTo("");
    assert.that([2,2]).isEqualTo("A");
    Row = 1;
    CutRow();
    assert.that(Bottom).isEqualTo(1);
    assert.that([2,1]).isEqualTo("A");
    Col = 1;
    CutCol();
    assert.that(Right).isEqualTo(1);
    assert.that([1,1]).isEqualTo("A");
    
    [1,1] = "A";
    [2,1] = "B";
    [3,1] = "C";
    moveto(2, 1);
    Enter();
    assert.that([1,1]).isEqualTo("A");
    assert.that([1,2]).isEqualTo("B");
    assert.that([2,2]).isEqualTo("C");
    NewLine();
    assert.that([1,2]).isEqualTo("\n");
    moveto(2, 2);
    ConnectCell();
    assert.that([1,2]).isEqualTo("\nC");

    moveto(1, 1);
    [1,1] = "A";
    InsertCellRight();
    assert.that([1,1]).isEqualTo("");
    assert.that([2,1]).isEqualTo("A");
    [1,1] = "B";
    InsertCellDown();
    assert.that([1,1]).isEqualTo("");
    assert.that([1,2]).isEqualTo("B");
    [3,1] = "C";
    DeleteCellLeft();
    assert.that([1,1]).isEqualTo("A");
    assert.that([2,1]).isEqualTo("C");
    [1,3] = "D";
    DeleteCellUp();
    assert.that([1,1]).isEqualTo("B");
    assert.that([1,2]).isEqualTo("D");

    this.clear();
  }
}

assert = new Assert();
new MenuTest().test(assert);
assert.showResult();
