import { Assert } from "lib/Assert.cms";

class FunctionsTest {
  name() {
    return "FunctionsTest";
  }

  clear() {
    Right = 1;
    Bottom = 1;
    Col = 1;
    Row = 1;
    [1,1] = "";
  }

  getValues(l, t, r, b) {
    result = "";
    for (y = t; y <= b; y++) {
      for (x = l; x <= r; x++) {
        result += [x,y];
      }
    }
    return result;
  }

  test(assert) {
    this.clear();

    moveto(1, 2);
    assert.that(Col).isEqualTo(1);
    assert.that(Row).isEqualTo(2);

    move(3, 4);
    assert.that(Col).isEqualTo(4);
    assert.that(Row).isEqualTo(6);

    write(123);
    assert.that([4,6]).isEqualTo(123);
    assert.that(Col).isEqualTo(5);
    assert.that(Row).isEqualTo(6);

    writeln(456);
    assert.that([5,6]).isEqualTo(456);
    assert.that(Col).isEqualTo(1);
    assert.that(Row).isEqualTo(7);

    a = 1;
    b = 2;
    swap(a, b);
    assert.that(a).isEqualTo(2);
    assert.that(b).isEqualTo(1);

    [1,2] = "012";
    [2,1] = "021";
    swap([1,2], [2,1]);
    assert.that([1,2]).isEqualTo("021");
    assert.that([2,1]).isEqualTo("012");

    obj1 = {a: "obj1"};
    obj2 = {a: "obj2"};
    swap(obj1, obj2);
    assert.that(obj1.a).isEqualTo("obj2");
    assert.that(obj2.a).isEqualTo("obj1");

    InsertRow(1);
    assert.that([4,7]).isEqualTo(123);

    DeleteRow(1);
    assert.that([4,6]).isEqualTo(123);

    InsertCol(1);
    assert.that([5,6]).isEqualTo(123);

    DeleteCol(1);
    assert.that([4,6]).isEqualTo(123);

    a = "abcde";
    mid(a, 3, 2) = "===";
    assert.that(a).isEqualTo("ab===e");

    originalRowHeight = GetRowHeight();
    SetRowHeight(1, 5);
    assert.that(GetRowHeight(1)).isEqualTo(5);

    SetRowHeight(10);
    assert.that(GetRowHeight(1)).isEqualTo(10);
    SetRowHeight(originalRowHeight);

    originalColWidth = GetColWidth();
    SetColWidth(1, 5);
    assert.that(GetColWidth(1)).isEqualTo(5);

    SetColWidth(10);
    assert.that(GetColWidth(1)).isEqualTo(10);
    SetColWidth(originalColWidth);

    [1,1] = 3;
    [1,2] = 10;
    [1,3] = 4;
    [1,4] = "AAA3";
    [1,5] = "aaa2";
    [1,6] = "ＡＡＡ１";
    for (y = 1; y <= 6; y++) {
      [2,y] = y;
    }

    Sort(1, 1, 2, 6, 1, false, false, false, false);
    assert.that(this.getValues(1, 1, 1, 6)).isEqualTo("1034AAA3aaa2ＡＡＡ１");
    assert.that(this.getValues(2, 1, 2, 6)).isEqualTo("213456");

    Sort(1, 1, 2, 6, 1, true, false, false, false);
    assert.that(this.getValues(1, 1, 1, 6)).isEqualTo("ＡＡＡ１aaa2AAA34310");
    assert.that(this.getValues(2, 1, 2, 6)).isEqualTo("654312");

    Sort(1, 1, 2, 6, 1, false, true, false, false);
    assert.that(this.getValues(1, 1, 1, 6)).isEqualTo("3410AAA3aaa2ＡＡＡ１");
    assert.that(this.getValues(2, 1, 2, 6)).isEqualTo("132456");

    Sort(1, 1, 2, 6, 1, false, false, true, false);
    assert.that(this.getValues(1, 1, 1, 6)).isEqualTo("1034aaa2AAA3ＡＡＡ１");
    assert.that(this.getValues(2, 1, 2, 6)).isEqualTo("213546");

    Sort(1, 1, 2, 6, 1, false, false, false, true);
    assert.that(this.getValues(1, 1, 1, 6)).isEqualTo("1034ＡＡＡ１AAA3aaa2");
    assert.that(this.getValues(2, 1, 2, 6)).isEqualTo("213645");

    for (y = 1; y <= 3; y++) {
      for (x = 1; x <= 3; x++) {
        [x,y] = "ABC";
      }
    }

    ReplaceAll("B", "Z");
    assert.that(this.getValues(1, 1, 3, 3)).isEqualTo("AZCAZCAZCAZCAZCAZCAZCAZCAZC");
    ReplaceAll("z", "y", true, false, false);
    assert.that(this.getValues(1, 1, 3, 3)).isEqualTo("AyCAyCAyCAyCAyCAyCAyCAyCAyC");
    ReplaceAll("y", "x", false, true, false);
    assert.that(this.getValues(1, 1, 3, 3)).isEqualTo("AyCAyCAyCAyCAyCAyCAyCAyCAyC");
    ReplaceAll("AyC", "ABC", false, true, false);
    assert.that(this.getValues(1, 1, 3, 3)).isEqualTo("ABCABCABCABCABCABCABCABCABC");
    ReplaceAll("(A+)(B+)(C+)", "$1:$2:$3", false, false, true);
    assert.that(this.getValues(1, 1, 3, 3)).isEqualTo("A:B:CA:B:CA:B:CA:B:CA:B:CA:B:CA:B:CA:B:CA:B:C");
    ReplaceAll("(a+):(b+):(c+)", "$1-$2-$3", true, false, true);
    assert.that(this.getValues(1, 1, 3, 3)).isEqualTo("A-B-CA-B-CA-B-CA-B-CA-B-CA-B-CA-B-CA-B-CA-B-C");
    ReplaceAll("B+", "#$0#", false, true, true);
    assert.that(this.getValues(1, 1, 3, 3)).isEqualTo("A-B-CA-B-CA-B-CA-B-CA-B-CA-B-CA-B-CA-B-CA-B-C");
    ReplaceAll("A+\\-B+\\-C+", "#$0#", false, true, true);
    assert.that(this.getValues(1, 1, 3, 3)).isEqualTo("#A-B-C##A-B-C##A-B-C##A-B-C##A-B-C##A-B-C##A-B-C##A-B-C##A-B-C#");
    ReplaceAll("-B-", "", false, false, false, 2, 2, 2, 2);
    assert.that(this.getValues(1, 1, 3, 3)).isEqualTo("#A-B-C##A-B-C##A-B-C##A-B-C##AC##A-B-C##A-B-C##A-B-C##A-B-C#");
    [1,1] = "A\nB\nC\nD";
    ReplaceAll("B\nC", "Z\n");
    assert.that([1,1]).isEqualTo("A\nZ\n\nD");
    [2,1] = "";
    ReplaceAll("(.*)", "($1)", false, false, true);
    assert.that([1,1]).isEqualTo("(A\nZ\n\nD)");
    assert.that([2,1]).isEqualTo("");
    [1,1] = "AABBaabb";
    ReplaceAll(/(A+)/g, "($1)");
    assert.that([1,1]).isEqualTo("(AA)BBaabb");
    [1,1] = "AABBaabb";
    ReplaceAll(/(A+)/gi, "($1)");
    assert.that([1,1]).isEqualTo("(AA)BB(aa)bb");

    cell(3, 1) = "abc";
    assert.that(cell(3, 1)).isEqualTo("abc");
    assert.that([3, 1]).isEqualTo("abc");

    assert.that(int("1.25") + int(-5.5)).isEqualTo(-4);
    assert.that(double("1.25") + double(-5.5)).isEqualTo(-4.25);
    assert.that(str("1.25") + str(-5.5)).isEqualTo("1.25-5.5");

    assert.that(max(3, 1, 4)).isEqualTo(4);
    assert.that(min(3, 1, 4)).isEqualTo(1);

    assert.that(len("あああabcde")).isEqualTo(8);
    assert.that(lenB("あああabcde")).isEqualTo(11);
    assert.that(left("あああabcde", 3)).isEqualTo("あああ");
    assert.that(right("あああabcde", 3)).isEqualTo("cde");
    assert.that(mid("あああabcde", 3, 4)).isEqualTo("あabc");
    assert.that(mid("あああabcde", 3)).isEqualTo("あabcde");
    assert.that(pos("あああabcde", "abc")).isEqualTo(4);
    assert.that(pos("あああabcde", "ABC")).isEqualTo(0);
    assert.that(posB("あああabcde", "abc")).isEqualTo(7);
    assert.that(posB("あああabcde", "ABC")).isEqualTo(0);
    assert.that(asc("あああabcde")).isEqualTo(33440);
    assert.that(ascW("あああabcde")).isEqualTo(12354);
    assert.that(chr(33440)).isEqualTo("あ");
    assert.that(chrW(12354)).isEqualTo("あ");
    assert.that(replace("A&&B", "&", "&amp;")).isEqualTo("A&amp;&amp;B");
    assert.that(replace("ABC-AB\nC-abc", "ABC", "($1)", false, false)).isEqualTo("($1)-AB\nC-abc");
    assert.that(replace("ABC-AB\nC-abc", "ABC", "($1)", true, false)).isEqualTo("($1)-AB\nC-($1)");
    assert.that(replace("ABC-AB\nC-abc", "([A-Z\\n]+)", "($1)", false, true)).isEqualTo("(ABC)-(AB\nC)-abc");
    assert.that(replace("ABC-AB\nC-abc", "([A-Z\\n]+)", "($1)", true, true)).isEqualTo("(ABC)-(AB\nC)-(abc)");
    assert.that(replace("ABC-AB\nC-abc", "(.*)", "($1)", true, true)).isEqualTo("(ABC-AB\nC-abc)");

    // 3, 10, 4, 1, 2, 3
    [1,1] = 1;
    [2,1] = 10;
    [1,2] = "";
    [2,2] = 10;
    assert.that(sum(1, 1, 2, 3)).isEqualTo(21);
    assert.that(avr(1, 1, 2, 3)).isEqualTo(7);
    assert.that(random(1)).isEqualTo(0);

    pi = 3.141592653589793;
    assert.that(sqrt(9)).isEqualTo(3);
    assert.that(sin(pi / 2)).isEqualTo(1);
    assert.that(cos(pi)).isEqualTo(-1);
    assert.that(tan(pi / 3)).isEqualTo(sqrt(3));
    assert.that(asin(1)).isEqualTo(pi / 2);
    assert.that(acos(-1)).isEqualTo(pi);
    assert.that(atan(sqrt(3))).isEqualTo(pi / 3);
    assert.that(atan2(0, 0)).isEqualTo(0);
    assert.that(atan2(0, -1)).isEqualTo(pi);
    assert.that(pow(4, 2.5)).isEqualTo(32);

    [6,6] = 6;
    Select(2, 3, 4, 5);
    assert.that(SelLeft).isEqualTo(2);
    assert.that(SelTop).isEqualTo(3);
    assert.that(SelRight).isEqualTo(4);
    assert.that(SelBottom).isEqualTo(5);

    this.clear();
  }
}

assert = new Assert();
new FunctionsTest().test(assert);
assert.showResult();
